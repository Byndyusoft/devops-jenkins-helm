kind: Namespace
apiVersion: v1
metadata:
  name: jenkins-ci
---
apiVersion: deckhouse.io/v1
kind: DexClient
metadata:
  name: jenkins-ci
  namespace: jenkins-ci
spec:
  allowedGroups:
    - Everyone
    - admins
    - developers
  redirectURIs:
    - https://jenkins-ci.k8s.local/securityRealm/finishLogin

# Need to copy secrets for jenkins jcasc
# clientSecret=$(kubectl get secret dex-client-jenkins-ci -o jsonpath='{.data.clientSecret}' -n jenkins-ci | base64 -d)
# kubectl create secret generic dex-client-jenkins-copy --from-literal='clientsecret='$clientSecret -n jenkins-ci
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins-ci
rules:
- apiGroups:
  - '*'
  resources:
  - statefulsets
  - services
  - replicationcontrollers
  - replicasets
  - podtemplates
  - podsecuritypolicies
  - pods
  - pods/log
  - pods/exec
  - podpreset
  - poddisruptionbudget
  - persistentvolumes
  - persistentvolumeclaims
  - jobs
  - endpoints
  - deployments
  - deployments/scale
  - daemonsets
  - cronjobs
  - configmaps
  - namespaces
  - events
  - secrets
  verbs:
  - create
  - get
  - watch
  - delete
  - list
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins-ci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins-ci
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts:jenkins-ci
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: jenkins-ci-tls                         # the name of the certificate; you can use it to view the cert's status
  namespace: jenkins-ci
spec:
  secretName: jenkins-ci-tls                # the name of the secret to store a private key and a certificate
  issuerRef:
    kind: ClusterIssuer                      # the link to the certificate "issuer", see more below
    name: letsencrypt # selfsigned - for local usage
  commonName: jenkins-ci.k8s.local
  dnsNames:                                  # дополнительыне домены сертификата, указывать не обязательно
   - jenkins-ci.k8s.local